# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MultiOrderError(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_code': 'str',
        'message': 'str',
        'property_path': 'str',
        'invalid_value': 'object',
        'error_code': 'str',
        'property_path': 'str',
        'invalid_value': 'object',
        'correlation_id': 'str'
    }

    attribute_map = {
        'error_code': 'errorCode',
        'message': 'message',
        'property_path': 'propertyPath',
        'invalid_value': 'invalidValue',
        'error_code': 'error_code',
        'property_path': 'property_path',
        'invalid_value': 'invalid_value',
        'correlation_id': 'correlation_id'
    }

    def __init__(self, message=None, error_code=None, property_path=None, invalid_value=None, correlation_id=None):  # noqa: E501
        """MultiOrderError - a model defined in Swagger"""  # noqa: E501
        self._error_code = None
        self._message = None
        self._property_path = None
        self._invalid_value = None
        self._error_code = None
        self._property_path = None
        self._invalid_value = None
        self._correlation_id = None
        self.discriminator = None
        if error_code is not None:
            self.error_code = error_code
        if message is not None:
            self.message = message
        if property_path is not None:
            self.property_path = property_path
        if invalid_value is not None:
            self.invalid_value = invalid_value
        if error_code is not None:
            self.error_code = error_code
        if property_path is not None:
            self.property_path = property_path
        if invalid_value is not None:
            self.invalid_value = invalid_value
        if correlation_id is not None:
            self.correlation_id = correlation_id

    @property
    def error_code(self):
        """Gets the error_code of this MultiOrderError.  # noqa: E501

        Unique code for the error state  # noqa: E501

        :return: The error_code of this MultiOrderError.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this MultiOrderError.

        Unique code for the error state  # noqa: E501

        :param error_code: The error_code of this MultiOrderError.  # noqa: E501
        :type: str
        """

        self._error_code = error_code

    @property
    def message(self):
        """Gets the message of this MultiOrderError.  # noqa: E501

        Verbose message for the error state  # noqa: E501

        :return: The message of this MultiOrderError.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this MultiOrderError.

        Verbose message for the error state  # noqa: E501

        :param message: The message of this MultiOrderError.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def property_path(self):
        """Gets the property_path of this MultiOrderError.  # noqa: E501

        Path to property failing validation  # noqa: E501

        :return: The property_path of this MultiOrderError.  # noqa: E501
        :rtype: str
        """
        return self._property_path

    @property_path.setter
    def property_path(self, property_path):
        """Sets the property_path of this MultiOrderError.

        Path to property failing validation  # noqa: E501

        :param property_path: The property_path of this MultiOrderError.  # noqa: E501
        :type: str
        """

        self._property_path = property_path

    @property
    def invalid_value(self):
        """Gets the invalid_value of this MultiOrderError.  # noqa: E501

        Invalid value for the property failing validation  # noqa: E501

        :return: The invalid_value of this MultiOrderError.  # noqa: E501
        :rtype: object
        """
        return self._invalid_value

    @invalid_value.setter
    def invalid_value(self, invalid_value):
        """Sets the invalid_value of this MultiOrderError.

        Invalid value for the property failing validation  # noqa: E501

        :param invalid_value: The invalid_value of this MultiOrderError.  # noqa: E501
        :type: object
        """

        self._invalid_value = invalid_value

    @property
    def error_code(self):
        """Gets the error_code of this MultiOrderError.  # noqa: E501


        :return: The error_code of this MultiOrderError.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this MultiOrderError.


        :param error_code: The error_code of this MultiOrderError.  # noqa: E501
        :type: str
        """

        self._error_code = error_code

    @property
    def property_path(self):
        """Gets the property_path of this MultiOrderError.  # noqa: E501


        :return: The property_path of this MultiOrderError.  # noqa: E501
        :rtype: str
        """
        return self._property_path

    @property_path.setter
    def property_path(self, property_path):
        """Sets the property_path of this MultiOrderError.


        :param property_path: The property_path of this MultiOrderError.  # noqa: E501
        :type: str
        """

        self._property_path = property_path

    @property
    def invalid_value(self):
        """Gets the invalid_value of this MultiOrderError.  # noqa: E501


        :return: The invalid_value of this MultiOrderError.  # noqa: E501
        :rtype: object
        """
        return self._invalid_value

    @invalid_value.setter
    def invalid_value(self, invalid_value):
        """Sets the invalid_value of this MultiOrderError.


        :param invalid_value: The invalid_value of this MultiOrderError.  # noqa: E501
        :type: object
        """

        self._invalid_value = invalid_value

    @property
    def correlation_id(self):
        """Gets the correlation_id of this MultiOrderError.  # noqa: E501

        A unique identifier for tracking individual orders within the batch  # noqa: E501

        :return: The correlation_id of this MultiOrderError.  # noqa: E501
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """Sets the correlation_id of this MultiOrderError.

        A unique identifier for tracking individual orders within the batch  # noqa: E501

        :param correlation_id: The correlation_id of this MultiOrderError.  # noqa: E501
        :type: str
        """

        self._correlation_id = correlation_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MultiOrderError, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MultiOrderError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
