# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Margin(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'span_margin': 'float',
        'exposure_margin': 'float',
        'equity_margin': 'float',
        'net_buy_premium': 'float',
        'additional_margin': 'float',
        'total_margin': 'float',
        'tender_margin': 'float'
    }

    attribute_map = {
        'span_margin': 'span_margin',
        'exposure_margin': 'exposure_margin',
        'equity_margin': 'equity_margin',
        'net_buy_premium': 'net_buy_premium',
        'additional_margin': 'additional_margin',
        'total_margin': 'total_margin',
        'tender_margin': 'tender_margin'
    }

    def __init__(self, span_margin=None, exposure_margin=None, equity_margin=None, net_buy_premium=None, additional_margin=None, total_margin=None, tender_margin=None):  # noqa: E501
        """Margin - a model defined in Swagger"""  # noqa: E501
        self._span_margin = None
        self._exposure_margin = None
        self._equity_margin = None
        self._net_buy_premium = None
        self._additional_margin = None
        self._total_margin = None
        self._tender_margin = None
        self.discriminator = None
        if span_margin is not None:
            self.span_margin = span_margin
        if exposure_margin is not None:
            self.exposure_margin = exposure_margin
        if equity_margin is not None:
            self.equity_margin = equity_margin
        if net_buy_premium is not None:
            self.net_buy_premium = net_buy_premium
        if additional_margin is not None:
            self.additional_margin = additional_margin
        if total_margin is not None:
            self.total_margin = total_margin
        if tender_margin is not None:
            self.tender_margin = tender_margin

    @property
    def span_margin(self):
        """Gets the span_margin of this Margin.  # noqa: E501

        Upfront margin mandatory by exchange for derivatives trade applicable on only FNO trade  # noqa: E501

        :return: The span_margin of this Margin.  # noqa: E501
        :rtype: float
        """
        return self._span_margin

    @span_margin.setter
    def span_margin(self, span_margin):
        """Sets the span_margin of this Margin.

        Upfront margin mandatory by exchange for derivatives trade applicable on only FNO trade  # noqa: E501

        :param span_margin: The span_margin of this Margin.  # noqa: E501
        :type: float
        """

        self._span_margin = span_margin

    @property
    def exposure_margin(self):
        """Gets the exposure_margin of this Margin.  # noqa: E501

        Based on ELM percentage values provided by exchange, applicable on only FNO trade  # noqa: E501

        :return: The exposure_margin of this Margin.  # noqa: E501
        :rtype: float
        """
        return self._exposure_margin

    @exposure_margin.setter
    def exposure_margin(self, exposure_margin):
        """Sets the exposure_margin of this Margin.

        Based on ELM percentage values provided by exchange, applicable on only FNO trade  # noqa: E501

        :param exposure_margin: The exposure_margin of this Margin.  # noqa: E501
        :type: float
        """

        self._exposure_margin = exposure_margin

    @property
    def equity_margin(self):
        """Gets the equity_margin of this Margin.  # noqa: E501

        Margin applicable for any equity trade  # noqa: E501

        :return: The equity_margin of this Margin.  # noqa: E501
        :rtype: float
        """
        return self._equity_margin

    @equity_margin.setter
    def equity_margin(self, equity_margin):
        """Sets the equity_margin of this Margin.

        Margin applicable for any equity trade  # noqa: E501

        :param equity_margin: The equity_margin of this Margin.  # noqa: E501
        :type: float
        """

        self._equity_margin = equity_margin

    @property
    def net_buy_premium(self):
        """Gets the net_buy_premium of this Margin.  # noqa: E501

        Option premium required.  # noqa: E501

        :return: The net_buy_premium of this Margin.  # noqa: E501
        :rtype: float
        """
        return self._net_buy_premium

    @net_buy_premium.setter
    def net_buy_premium(self, net_buy_premium):
        """Sets the net_buy_premium of this Margin.

        Option premium required.  # noqa: E501

        :param net_buy_premium: The net_buy_premium of this Margin.  # noqa: E501
        :type: float
        """

        self._net_buy_premium = net_buy_premium

    @property
    def additional_margin(self):
        """Gets the additional_margin of this Margin.  # noqa: E501

        Application margin applicable on MCX FNO trade for certain commodities  # noqa: E501

        :return: The additional_margin of this Margin.  # noqa: E501
        :rtype: float
        """
        return self._additional_margin

    @additional_margin.setter
    def additional_margin(self, additional_margin):
        """Sets the additional_margin of this Margin.

        Application margin applicable on MCX FNO trade for certain commodities  # noqa: E501

        :param additional_margin: The additional_margin of this Margin.  # noqa: E501
        :type: float
        """

        self._additional_margin = additional_margin

    @property
    def total_margin(self):
        """Gets the total_margin of this Margin.  # noqa: E501

        Total margin required for the basket  # noqa: E501

        :return: The total_margin of this Margin.  # noqa: E501
        :rtype: float
        """
        return self._total_margin

    @total_margin.setter
    def total_margin(self, total_margin):
        """Sets the total_margin of this Margin.

        Total margin required for the basket  # noqa: E501

        :param total_margin: The total_margin of this Margin.  # noqa: E501
        :type: float
        """

        self._total_margin = total_margin

    @property
    def tender_margin(self):
        """Gets the tender_margin of this Margin.  # noqa: E501

        Tender margin  # noqa: E501

        :return: The tender_margin of this Margin.  # noqa: E501
        :rtype: float
        """
        return self._tender_margin

    @tender_margin.setter
    def tender_margin(self, tender_margin):
        """Sets the tender_margin of this Margin.

        Tender margin  # noqa: E501

        :param tender_margin: The tender_margin of this Margin.  # noqa: E501
        :type: float
        """

        self._tender_margin = tender_margin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Margin, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Margin):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
