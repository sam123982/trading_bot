# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OptionStrikeData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expiry': 'datetime',
        'pcr': 'float',
        'strike_price': 'float',
        'underlying_key': 'str',
        'underlying_spot_price': 'float',
        'call_options': 'PutCallOptionChainData',
        'put_options': 'PutCallOptionChainData'
    }

    attribute_map = {
        'expiry': 'expiry',
        'pcr': 'pcr',
        'strike_price': 'strike_price',
        'underlying_key': 'underlying_key',
        'underlying_spot_price': 'underlying_spot_price',
        'call_options': 'call_options',
        'put_options': 'put_options'
    }

    def __init__(self, expiry=None, pcr=None, strike_price=None, underlying_key=None, underlying_spot_price=None, call_options=None, put_options=None):  # noqa: E501
        """OptionStrikeData - a model defined in Swagger"""  # noqa: E501
        self._expiry = None
        self._pcr = None
        self._strike_price = None
        self._underlying_key = None
        self._underlying_spot_price = None
        self._call_options = None
        self._put_options = None
        self.discriminator = None
        if expiry is not None:
            self.expiry = expiry
        if pcr is not None:
            self.pcr = pcr
        if strike_price is not None:
            self.strike_price = strike_price
        if underlying_key is not None:
            self.underlying_key = underlying_key
        if underlying_spot_price is not None:
            self.underlying_spot_price = underlying_spot_price
        if call_options is not None:
            self.call_options = call_options
        if put_options is not None:
            self.put_options = put_options

    @property
    def expiry(self):
        """Gets the expiry of this OptionStrikeData.  # noqa: E501


        :return: The expiry of this OptionStrikeData.  # noqa: E501
        :rtype: datetime
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this OptionStrikeData.


        :param expiry: The expiry of this OptionStrikeData.  # noqa: E501
        :type: datetime
        """

        self._expiry = expiry

    @property
    def pcr(self):
        """Gets the pcr of this OptionStrikeData.  # noqa: E501


        :return: The pcr of this OptionStrikeData.  # noqa: E501
        :rtype: float
        """
        return self._pcr

    @pcr.setter
    def pcr(self, pcr):
        """Sets the pcr of this OptionStrikeData.


        :param pcr: The pcr of this OptionStrikeData.  # noqa: E501
        :type: float
        """

        self._pcr = pcr

    @property
    def strike_price(self):
        """Gets the strike_price of this OptionStrikeData.  # noqa: E501


        :return: The strike_price of this OptionStrikeData.  # noqa: E501
        :rtype: float
        """
        return self._strike_price

    @strike_price.setter
    def strike_price(self, strike_price):
        """Sets the strike_price of this OptionStrikeData.


        :param strike_price: The strike_price of this OptionStrikeData.  # noqa: E501
        :type: float
        """

        self._strike_price = strike_price

    @property
    def underlying_key(self):
        """Gets the underlying_key of this OptionStrikeData.  # noqa: E501


        :return: The underlying_key of this OptionStrikeData.  # noqa: E501
        :rtype: str
        """
        return self._underlying_key

    @underlying_key.setter
    def underlying_key(self, underlying_key):
        """Sets the underlying_key of this OptionStrikeData.


        :param underlying_key: The underlying_key of this OptionStrikeData.  # noqa: E501
        :type: str
        """

        self._underlying_key = underlying_key

    @property
    def underlying_spot_price(self):
        """Gets the underlying_spot_price of this OptionStrikeData.  # noqa: E501


        :return: The underlying_spot_price of this OptionStrikeData.  # noqa: E501
        :rtype: float
        """
        return self._underlying_spot_price

    @underlying_spot_price.setter
    def underlying_spot_price(self, underlying_spot_price):
        """Sets the underlying_spot_price of this OptionStrikeData.


        :param underlying_spot_price: The underlying_spot_price of this OptionStrikeData.  # noqa: E501
        :type: float
        """

        self._underlying_spot_price = underlying_spot_price

    @property
    def call_options(self):
        """Gets the call_options of this OptionStrikeData.  # noqa: E501


        :return: The call_options of this OptionStrikeData.  # noqa: E501
        :rtype: PutCallOptionChainData
        """
        return self._call_options

    @call_options.setter
    def call_options(self, call_options):
        """Sets the call_options of this OptionStrikeData.


        :param call_options: The call_options of this OptionStrikeData.  # noqa: E501
        :type: PutCallOptionChainData
        """

        self._call_options = call_options

    @property
    def put_options(self):
        """Gets the put_options of this OptionStrikeData.  # noqa: E501


        :return: The put_options of this OptionStrikeData.  # noqa: E501
        :rtype: PutCallOptionChainData
        """
        return self._put_options

    @put_options.setter
    def put_options(self, put_options):
        """Sets the put_options of this OptionStrikeData.


        :param put_options: The put_options of this OptionStrikeData.  # noqa: E501
        :type: PutCallOptionChainData
        """

        self._put_options = put_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OptionStrikeData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptionStrikeData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
