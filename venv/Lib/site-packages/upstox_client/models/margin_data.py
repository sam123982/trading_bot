# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MarginData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'margins': 'list[Margin]',
        'required_margin': 'float',
        'final_margin': 'float'
    }

    attribute_map = {
        'margins': 'margins',
        'required_margin': 'required_margin',
        'final_margin': 'final_margin'
    }

    def __init__(self, margins=None, required_margin=None, final_margin=None):  # noqa: E501
        """MarginData - a model defined in Swagger"""  # noqa: E501
        self._margins = None
        self._required_margin = None
        self._final_margin = None
        self.discriminator = None
        if margins is not None:
            self.margins = margins
        if required_margin is not None:
            self.required_margin = required_margin
        if final_margin is not None:
            self.final_margin = final_margin

    @property
    def margins(self):
        """Gets the margins of this MarginData.  # noqa: E501

        Response data for instrument margin details  # noqa: E501

        :return: The margins of this MarginData.  # noqa: E501
        :rtype: list[Margin]
        """
        return self._margins

    @margins.setter
    def margins(self, margins):
        """Sets the margins of this MarginData.

        Response data for instrument margin details  # noqa: E501

        :param margins: The margins of this MarginData.  # noqa: E501
        :type: list[Margin]
        """

        self._margins = margins

    @property
    def required_margin(self):
        """Gets the required_margin of this MarginData.  # noqa: E501

        Total margin required to execute the orders  # noqa: E501

        :return: The required_margin of this MarginData.  # noqa: E501
        :rtype: float
        """
        return self._required_margin

    @required_margin.setter
    def required_margin(self, required_margin):
        """Sets the required_margin of this MarginData.

        Total margin required to execute the orders  # noqa: E501

        :param required_margin: The required_margin of this MarginData.  # noqa: E501
        :type: float
        """

        self._required_margin = required_margin

    @property
    def final_margin(self):
        """Gets the final_margin of this MarginData.  # noqa: E501

        Total margin after margin benefit  # noqa: E501

        :return: The final_margin of this MarginData.  # noqa: E501
        :rtype: float
        """
        return self._final_margin

    @final_margin.setter
    def final_margin(self, final_margin):
        """Sets the final_margin of this MarginData.

        Total margin after margin benefit  # noqa: E501

        :param final_margin: The final_margin of this MarginData.  # noqa: E501
        :type: float
        """

        self._final_margin = final_margin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MarginData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarginData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
