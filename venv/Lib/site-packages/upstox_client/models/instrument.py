# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Instrument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instrument_key': 'str',
        'quantity': 'int',
        'product': 'str',
        'transaction_type': 'str',
        'price': 'float'
    }

    attribute_map = {
        'instrument_key': 'instrument_key',
        'quantity': 'quantity',
        'product': 'product',
        'transaction_type': 'transaction_type',
        'price': 'price'
    }

    def __init__(self, instrument_key=None, quantity=None, product=None, transaction_type=None, price=None):  # noqa: E501
        """Instrument - a model defined in Swagger"""  # noqa: E501
        self._instrument_key = None
        self._quantity = None
        self._product = None
        self._transaction_type = None
        self._price = None
        self.discriminator = None
        self.instrument_key = instrument_key
        self.quantity = quantity
        self.product = product
        self.transaction_type = transaction_type
        if price is not None:
            self.price = price

    @property
    def instrument_key(self):
        """Gets the instrument_key of this Instrument.  # noqa: E501

        Instrument Key of the Instrument  # noqa: E501

        :return: The instrument_key of this Instrument.  # noqa: E501
        :rtype: str
        """
        return self._instrument_key

    @instrument_key.setter
    def instrument_key(self, instrument_key):
        """Sets the instrument_key of this Instrument.

        Instrument Key of the Instrument  # noqa: E501

        :param instrument_key: The instrument_key of this Instrument.  # noqa: E501
        :type: str
        """
        if instrument_key is None:
            raise ValueError("Invalid value for `instrument_key`, must not be `None`")  # noqa: E501

        self._instrument_key = instrument_key

    @property
    def quantity(self):
        """Gets the quantity of this Instrument.  # noqa: E501

        Quantity of the instrument to buy or sell for margin calculation  # noqa: E501

        :return: The quantity of this Instrument.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Instrument.

        Quantity of the instrument to buy or sell for margin calculation  # noqa: E501

        :param quantity: The quantity of this Instrument.  # noqa: E501
        :type: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def product(self):
        """Gets the product of this Instrument.  # noqa: E501

        Product with which the order is to be placed  # noqa: E501

        :return: The product of this Instrument.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this Instrument.

        Product with which the order is to be placed  # noqa: E501

        :param product: The product of this Instrument.  # noqa: E501
        :type: str
        """
        if product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")  # noqa: E501

        self._product = product

    @property
    def transaction_type(self):
        """Gets the transaction_type of this Instrument.  # noqa: E501

        Indicates whether its a BUY or SELL order  # noqa: E501

        :return: The transaction_type of this Instrument.  # noqa: E501
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this Instrument.

        Indicates whether its a BUY or SELL order  # noqa: E501

        :param transaction_type: The transaction_type of this Instrument.  # noqa: E501
        :type: str
        """
        if transaction_type is None:
            raise ValueError("Invalid value for `transaction_type`, must not be `None`")  # noqa: E501

        self._transaction_type = transaction_type

    @property
    def price(self):
        """Gets the price of this Instrument.  # noqa: E501

        price  # noqa: E501

        :return: The price of this Instrument.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Instrument.

        price  # noqa: E501

        :param price: The price of this Instrument.  # noqa: E501
        :type: float
        """

        self._price = price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Instrument, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Instrument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
