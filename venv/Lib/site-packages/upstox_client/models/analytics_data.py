# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalyticsData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vega': 'float',
        'theta': 'float',
        'gamma': 'float',
        'delta': 'float',
        'iv': 'float',
        'pop': 'float'
    }

    attribute_map = {
        'vega': 'vega',
        'theta': 'theta',
        'gamma': 'gamma',
        'delta': 'delta',
        'iv': 'iv',
        'pop': 'pop'
    }

    def __init__(self, vega=None, theta=None, gamma=None, delta=None, iv=None, pop=None):  # noqa: E501
        """AnalyticsData - a model defined in Swagger"""  # noqa: E501
        self._vega = None
        self._theta = None
        self._gamma = None
        self._delta = None
        self._iv = None
        self._pop = None
        self.discriminator = None
        if vega is not None:
            self.vega = vega
        if theta is not None:
            self.theta = theta
        if gamma is not None:
            self.gamma = gamma
        if delta is not None:
            self.delta = delta
        if iv is not None:
            self.iv = iv
        if pop is not None:
            self.pop = pop

    @property
    def vega(self):
        """Gets the vega of this AnalyticsData.  # noqa: E501


        :return: The vega of this AnalyticsData.  # noqa: E501
        :rtype: float
        """
        return self._vega

    @vega.setter
    def vega(self, vega):
        """Sets the vega of this AnalyticsData.


        :param vega: The vega of this AnalyticsData.  # noqa: E501
        :type: float
        """

        self._vega = vega

    @property
    def theta(self):
        """Gets the theta of this AnalyticsData.  # noqa: E501


        :return: The theta of this AnalyticsData.  # noqa: E501
        :rtype: float
        """
        return self._theta

    @theta.setter
    def theta(self, theta):
        """Sets the theta of this AnalyticsData.


        :param theta: The theta of this AnalyticsData.  # noqa: E501
        :type: float
        """

        self._theta = theta

    @property
    def gamma(self):
        """Gets the gamma of this AnalyticsData.  # noqa: E501


        :return: The gamma of this AnalyticsData.  # noqa: E501
        :rtype: float
        """
        return self._gamma

    @gamma.setter
    def gamma(self, gamma):
        """Sets the gamma of this AnalyticsData.


        :param gamma: The gamma of this AnalyticsData.  # noqa: E501
        :type: float
        """

        self._gamma = gamma

    @property
    def delta(self):
        """Gets the delta of this AnalyticsData.  # noqa: E501


        :return: The delta of this AnalyticsData.  # noqa: E501
        :rtype: float
        """
        return self._delta

    @delta.setter
    def delta(self, delta):
        """Sets the delta of this AnalyticsData.


        :param delta: The delta of this AnalyticsData.  # noqa: E501
        :type: float
        """

        self._delta = delta

    @property
    def iv(self):
        """Gets the iv of this AnalyticsData.  # noqa: E501


        :return: The iv of this AnalyticsData.  # noqa: E501
        :rtype: float
        """
        return self._iv

    @iv.setter
    def iv(self, iv):
        """Sets the iv of this AnalyticsData.


        :param iv: The iv of this AnalyticsData.  # noqa: E501
        :type: float
        """

        self._iv = iv

    @property
    def pop(self):
        """Gets the pop of this AnalyticsData.  # noqa: E501


        :return: The pop of this AnalyticsData.  # noqa: E501
        :rtype: float
        """
        return self._pop

    @pop.setter
    def pop(self, pop):
        """Sets the pop of this AnalyticsData.


        :param pop: The pop of this AnalyticsData.  # noqa: E501
        :type: float
        """

        self._pop = pop

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalyticsData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
