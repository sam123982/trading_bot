# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MarketData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ltp': 'float',
        'volume': 'int',
        'oi': 'float',
        'close_price': 'float',
        'bid_price': 'float',
        'bid_qty': 'int',
        'ask_price': 'float',
        'ask_qty': 'int',
        'prev_oi': 'float'
    }

    attribute_map = {
        'ltp': 'ltp',
        'volume': 'volume',
        'oi': 'oi',
        'close_price': 'close_price',
        'bid_price': 'bid_price',
        'bid_qty': 'bid_qty',
        'ask_price': 'ask_price',
        'ask_qty': 'ask_qty',
        'prev_oi': 'prev_oi'
    }

    def __init__(self, ltp=None, volume=None, oi=None, close_price=None, bid_price=None, bid_qty=None, ask_price=None, ask_qty=None, prev_oi=None):  # noqa: E501
        """MarketData - a model defined in Swagger"""  # noqa: E501
        self._ltp = None
        self._volume = None
        self._oi = None
        self._close_price = None
        self._bid_price = None
        self._bid_qty = None
        self._ask_price = None
        self._ask_qty = None
        self._prev_oi = None
        self.discriminator = None
        if ltp is not None:
            self.ltp = ltp
        if volume is not None:
            self.volume = volume
        if oi is not None:
            self.oi = oi
        if close_price is not None:
            self.close_price = close_price
        if bid_price is not None:
            self.bid_price = bid_price
        if bid_qty is not None:
            self.bid_qty = bid_qty
        if ask_price is not None:
            self.ask_price = ask_price
        if ask_qty is not None:
            self.ask_qty = ask_qty
        if prev_oi is not None:
            self.prev_oi = prev_oi

    @property
    def ltp(self):
        """Gets the ltp of this MarketData.  # noqa: E501


        :return: The ltp of this MarketData.  # noqa: E501
        :rtype: float
        """
        return self._ltp

    @ltp.setter
    def ltp(self, ltp):
        """Sets the ltp of this MarketData.


        :param ltp: The ltp of this MarketData.  # noqa: E501
        :type: float
        """

        self._ltp = ltp

    @property
    def volume(self):
        """Gets the volume of this MarketData.  # noqa: E501


        :return: The volume of this MarketData.  # noqa: E501
        :rtype: int
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this MarketData.


        :param volume: The volume of this MarketData.  # noqa: E501
        :type: int
        """

        self._volume = volume

    @property
    def oi(self):
        """Gets the oi of this MarketData.  # noqa: E501


        :return: The oi of this MarketData.  # noqa: E501
        :rtype: float
        """
        return self._oi

    @oi.setter
    def oi(self, oi):
        """Sets the oi of this MarketData.


        :param oi: The oi of this MarketData.  # noqa: E501
        :type: float
        """

        self._oi = oi

    @property
    def close_price(self):
        """Gets the close_price of this MarketData.  # noqa: E501


        :return: The close_price of this MarketData.  # noqa: E501
        :rtype: float
        """
        return self._close_price

    @close_price.setter
    def close_price(self, close_price):
        """Sets the close_price of this MarketData.


        :param close_price: The close_price of this MarketData.  # noqa: E501
        :type: float
        """

        self._close_price = close_price

    @property
    def bid_price(self):
        """Gets the bid_price of this MarketData.  # noqa: E501


        :return: The bid_price of this MarketData.  # noqa: E501
        :rtype: float
        """
        return self._bid_price

    @bid_price.setter
    def bid_price(self, bid_price):
        """Sets the bid_price of this MarketData.


        :param bid_price: The bid_price of this MarketData.  # noqa: E501
        :type: float
        """

        self._bid_price = bid_price

    @property
    def bid_qty(self):
        """Gets the bid_qty of this MarketData.  # noqa: E501


        :return: The bid_qty of this MarketData.  # noqa: E501
        :rtype: int
        """
        return self._bid_qty

    @bid_qty.setter
    def bid_qty(self, bid_qty):
        """Sets the bid_qty of this MarketData.


        :param bid_qty: The bid_qty of this MarketData.  # noqa: E501
        :type: int
        """

        self._bid_qty = bid_qty

    @property
    def ask_price(self):
        """Gets the ask_price of this MarketData.  # noqa: E501


        :return: The ask_price of this MarketData.  # noqa: E501
        :rtype: float
        """
        return self._ask_price

    @ask_price.setter
    def ask_price(self, ask_price):
        """Sets the ask_price of this MarketData.


        :param ask_price: The ask_price of this MarketData.  # noqa: E501
        :type: float
        """

        self._ask_price = ask_price

    @property
    def ask_qty(self):
        """Gets the ask_qty of this MarketData.  # noqa: E501


        :return: The ask_qty of this MarketData.  # noqa: E501
        :rtype: int
        """
        return self._ask_qty

    @ask_qty.setter
    def ask_qty(self, ask_qty):
        """Sets the ask_qty of this MarketData.


        :param ask_qty: The ask_qty of this MarketData.  # noqa: E501
        :type: int
        """

        self._ask_qty = ask_qty

    @property
    def prev_oi(self):
        """Gets the prev_oi of this MarketData.  # noqa: E501


        :return: The prev_oi of this MarketData.  # noqa: E501
        :rtype: float
        """
        return self._prev_oi

    @prev_oi.setter
    def prev_oi(self, prev_oi):
        """Sets the prev_oi of this MarketData.


        :param prev_oi: The prev_oi of this MarketData.  # noqa: E501
        :type: float
        """

        self._prev_oi = prev_oi

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MarketData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarketData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
